Challenge #1


A 3-tier environment is a common setup. Use a tool of your choosing/familiarity create these
resources on a cloud environment (Azure/AWS/GCP). Please remember we will not be judged
on the outcome but more focusing on the approach, style and reproducibility.


Solution : 


For Creating a 3-Tier Architecture in AWS follow the below steps -


1. Creating VPC (Virtual Private Cloud)-
Either we can use AWS console or AWS CLI or IAC platform to create VPC 
* Using AWS CLI


aws ec2 create-vpc --cidr-block 10.0.0.0/24


* Using Terraform as IAC tool


resource “aws_vpc” “3tier_architecture_vpc” {
cidr_block = “0.0.0.0/24”
}


2. Creating Subnet groups inside the VPC
* Using AWS CLI
                       # Public Subnet
aws ec2 create-subnet --vpc-id <vpc id created in first step> --cidr-block 10.0.0.0/25


# Application Subnet and Database subnet
aws ec2 create-subnet --vpc-id <vpc id created in first step> --cidr-block 10.0.0.128/25


* Using Terraform Script
# Create a public subnet for front end application
resource "aws_subnet" "3_tier_public_subnet" {
  vpc_id                                 = aws_vpc.3tier_architecture_vpc.id
  cidr_block                           = "10.0.0.0/25”
  availability_zone                 =  "us-east-1a"
  map_public_ip_on_launch  =  true
}


# Create a private subnet for Application and Database
resource "aws_subnet" "3_tier_private_subnet" {
  vpc_id                                = aws_vpc.3tier_architecture_vpc.id
  cidr_block                          = "10.0.0.128/25" 
  availability_zone                = "us-east-1a"
  map_public_ip_on_launch = false }


3. Security Groups 
* Using AWS CLI
aws ec2 create-security-group --group-name Web-Sg--description "Security Group for Web Tier" --vpc-id your-vpc-id


aws ec2 create-security-group --group-name App-SG --description "Security Group for Application Tier" --vpc-id your-vpc-id


aws ec2 create-security-group --group-name DB-SG --description "Security Group for Database Tier" --vpc-id your-vpc-id


* Using AWS Terraform Script


Security Group for WEB SG - -
resource "aws_security_group" "3_tier_web_sg" {
  name           = "3-tier-web-sg"
  description   = "SG for web subnet"
  vpc_id          = aws_vpc.3tier_architecture_vpc.id


   ingress {
    from_port     = 80
    to_port         = 80
    protocol       = "tcp"
    cidr_blocks  = ["0.0.0.0/0"]  
  }
}


Security Group for APP SG - -


resource "aws_security_group" "3_tier_app_sg" {
  name        = "3-tier-app-sg"
  description = "SG for app subnet"
  vpc_id      = aws_vpc.3tier_architecture_vpc.id


   ingress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    security_groups = [aws_security_group.3_tier_web_sg.id]    }
}






Security Group for DB SG - -


resource "aws_security_group" "3_tier_db_sg" {
  name        = "3-tier-db-sg"
  description = "SG for db subnet"
  vpc_id      = aws_vpc.3tier_architecture_vpc.id


   ingress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    security_groups = [aws_security_group.3_tier_web_sg.id]    }
}




4. Create EC2 instances for all the tier - i.e. Front End , Application Layer, Backend
* Using AWS CLI 
aws ec2 create-security-group --group-name Web-SG --description "Security Group for Web Tier" --vpc-id <vpc id created in first step>


aws ec2 create-security-group --group-name App-SG --description "Security Group for Application Tier" --vpc-id <vpc id created in first step>


aws rds create-db-instance --db-instance-identifier 3-tier-rds-instance --db-instance-class db.t2.micro --engine mysql --master-username mydb --master-user-password 123# --allocated-storage 20 --vpc-security-group-ids <sg id from above step> --availability-zone [us-east-1a,us-east-1b]








* Using Terraform Script
 
Create EC2 instances for web 


resource "aws_instance" "web_instance" {
  ami           = "ami-0c55b159cbfafe1f0" 
  instance_type = "t2.micro" 
  subnet_id     = aws_subnet.3_tier_public_subnet.id
  security_groups = [aws_security_group.3_tier_web_sg.id]
  tags = {
    Name = "WebInstance"
  }
}


Create EC2 instances for app


resource "aws_instance" "app_instance" {
  ami           = "ami-0c55b159cbfafe1f0" 
  instance_type = "t2.micro" 
  subnet_id     = aws_subnet.3_tier_private_subnet.id
  security_groups = [aws_security_group.3_tier_app_sg.id]
  tags = {
    Name = "AppInstance"
  }
}


Create an RDS instance


resource "aws_db_instance" "my_rds" {
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = "5.7"
  instance_class       = "db.t2.micro"
  name                 = "mydb"
  username             = "mydb"
  password             = "123#"
  parameter_group_name = "default.mysql5.7"
  skip_final_snapshot  = true
}










This is the basic architecture for 3-Tier application. For scaling and monitoring purpose we can include cloudwatch logs and auto-scaling groups here.